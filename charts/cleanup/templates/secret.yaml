apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "cleanup.fullname" . }}
  labels:
    {{- include "cleanup.labels" . | nindent 4 }}
data:
  mysql.sh: |
    #!/bin/bash
    
    # Define the DSN URL for MySQL
    DSN="{{ .Values.dsn }}"
    
    # Extract connection parameters from DSN
    MYSQL_USER=$(echo "$DSN" | sed -n 's|mysql://\([^:@]*\):.*|\1|p')
    MYSQL_PASSWORD=$(echo "$DSN" | sed -n 's|mysql://[^:]*:\([^@]*\)@.*|\1|p')
    HOST_PORT=$(echo "$DSN" | sed -n 's|.*@tcp(\(.*\))/.*|\1|p')
    MYSQL_HOST=$(echo "$HOST_PORT" | cut -d':' -f1)
    MYSQL_PORT=$(echo "$HOST_PORT" | cut -d':' -f2)
    MYSQL_DATABASE=$(echo "$DSN" | sed -n 's|.*/\([^?]*\).*|\1|p')
    
    # Create the table if it doesn't exist
    mysql -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" -h "$MYSQL_HOST" -P "$MYSQL_PORT" -D "$MYSQL_DATABASE" -e "
    CREATE TABLE IF NOT EXISTS table_to_deletes (
        id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(255) NULL
    );" 2>/dev/null
    
    # Fetch list of databases to delete
    databases=$(mysql -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" -h "$MYSQL_HOST" -P "$MYSQL_PORT" -D "$MYSQL_DATABASE" -N -e "SELECT name FROM table_to_deletes;")
    
    # Iterate and drop each database
    for db in $databases; do
      echo "Attempting to drop database: $db"
      mysql -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" -h "$MYSQL_HOST" -P "$MYSQL_PORT" -e "DROP DATABASE IF EXISTS \`$db\`;" 2>/dev/null
      if [ $? -eq 0 ]; then
        echo "Successfully dropped: $db. Removing from table_to_deletes."
        mysql -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" -h "$MYSQL_HOST" -P "$MYSQL_PORT" -D "$MYSQL_DATABASE" -e "DELETE FROM table_to_deletes WHERE name = '$db';"
      else
        echo "Failed to drop: $db. Possibly in use or inaccessible."
      fi
    done
  postgres.sh: |
    #!/bin/bash
    
    # Define the DSN URL for PostgreSQL
    DSN="{{ .Values.dsn }}"
    
    # Export PGPASSWORD for authentication
    export PGPASSWORD=$(echo "$DSN" | sed -n 's|.*://[^:]*:\([^@]*\)@.*|\1|p')
    
    # Extract connection parameters from DSN
    PGUSER=$(echo "$DSN" | sed -n 's|.*://\([^:]*\):.*|\1|p')
    PGHOST=$(echo "$DSN" | sed -n 's|.*@\(.*\):.*|\1|p')
    PGPORT=$(echo "$DSN" | sed -n 's|.*:\([0-9]*\)/.*|\1|p')
    PGDATABASE=$(echo "$DSN" | sed -n 's|.*/\([^?]*\).*|\1|p')
    
    # Create the table if it doesn't exist
    psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" -c "
    CREATE TABLE IF NOT EXISTS table_to_deletes (
        id BIGSERIAL PRIMARY KEY,
        name VARCHAR(255)
    );" 2>/dev/null
    
    # Fetch list of databases to delete
    databases=$(psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" -At -c "SELECT name FROM table_to_deletes;")
    
    # Iterate and drop each database
    for db in $databases; do
      echo "Attempting to drop database: $db"
      psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d postgres -c "DROP DATABASE IF EXISTS \"$db\" WITH (FORCE);" 2>/dev/null
      if [ $? -eq 0 ]; then
        echo "Successfully dropped: $db. Removing from table_to_deletes."
        psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" -c "DELETE FROM table_to_deletes WHERE name = '$db';"
      else
        echo "Failed to drop: $db. Possibly in use or inaccessible."
      fi
    done
